apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-gateway
  namespace: volunteer-platform
  labels:
    app: nginx-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-gateway
  template:
    metadata:
      labels:
        app: nginx-gateway
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-gateway-service
  namespace: volunteer-platform
spec:
  selector:
    app: nginx-gateway
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: volunteer-platform
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        keepalive_requests 100;
        types_hash_max_size 2048;
        client_max_body_size 50M;

        gzip on;
        gzip_vary on;
        gzip_min_length 1000;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_disable "msie6";
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml
            application/xml+rss
            application/atom+xml
            application/ld+json
            image/svg+xml;

        limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
        limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;

        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
        limit_conn_zone $server_name zone=conn_limit_per_server:10m;

        upstream user_service {
            server user-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream activity_service {
            server activity-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream notification_service {
            server notification-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream payment_service {
            server payment-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream analytics_service {
            server analytics-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream recommendation_service {
            server recommendation-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        upstream frontend {
            server frontend:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        server {
            listen 80;
            # server_name localhost;

            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;

            limit_conn conn_limit_per_ip 20;
            limit_conn conn_limit_per_server 1000;

            # 前端路由 - 支持 SPA 路由
            location / {
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
                
                # 支持 WebSocket 升级
                proxy_cache_bypass $http_upgrade;
                proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;
            }

            # 用户服务路由 - 认证与用户相关接口
            # 更严格的限流仅用于 /auth/
            location ~ ^/api/v1/auth/ {
                limit_req zone=auth burst=5 nodelay;
                limit_req_status 429;
                
                proxy_pass http://user_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
                
                proxy_pass_request_headers on;
                
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 30s;
                
                proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
                proxy_next_upstream_tries 1;
            }

            # 用户服务路由 - 其他用户接口（避免与活动/通知服务冲突）
            location ~ ^/api/v1/(profile|stats|achievements|search)/ {
                limit_req zone=api burst=50 nodelay;
                limit_req_status 429;
                
                proxy_pass http://user_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
                
                proxy_pass_request_headers on;
                
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 30s;
                
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            }

            # 活动服务路由 - 包含活动管理和参与者管理
            location ~ ^/api/v1/(activities|participants|categories)/ {
                limit_req zone=api burst=50 nodelay;
                limit_req_status 429;
                
                proxy_pass http://activity_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
                
                # 传递认证头
                proxy_pass_request_headers on;
                
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 30s;
                
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            }

            # 通知服务路由（包含 notifications/templates/preferences）
            location ~ ^/api/v1/(notifications|templates|preferences)/ {
                limit_req zone=api burst=30 nodelay;
                limit_req_status 429;
                
                proxy_pass http://notification_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
                
                proxy_pass_request_headers on;
                
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 20s;
                
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            }

            # 移除未使用的支付/分析/推荐路由（对应服务未提供 API 路径）

            # CORS 预检请求处理
            location ~ ^/api/v1/.* {
                if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*' always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
                    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                    add_header 'Access-Control-Max-Age' 1728000 always;
                    add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                    add_header 'Content-Length' 0 always;
                    return 204;
                }
            }

            # API 文档
            location /api/docs/ {
                proxy_pass http://user_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # 健康检查
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }

            server_tokens off;

            error_page 404 /404.html;
            error_page 500 502 503 504 /50x.html;
            
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }
