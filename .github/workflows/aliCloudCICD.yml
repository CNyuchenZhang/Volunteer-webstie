name: 🚀 Volunteer Platform CI/CD

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ "main" ]

jobs:
  # 测试阶段 - PR时运行
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        pip install -r services/user/requirements.txt
        pip install -r services/activity/requirements.txt
        pip install -r services/notification/requirements.txt
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run user service tests
      run: |
        cd services/user
        python manage.py migrate --settings=user_service.settings.base
        python manage.py test users.tests --verbosity=2 --settings=user_service.settings.base
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run activity service tests
      run: |
        cd services/activity
        python manage.py migrate --settings=activity_service.settings.base
        python manage.py test activities.tests -v 2 --settings=activity_service.settings.base
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run notification service tests
      run: |
        cd services/notification
        python manage.py migrate --settings=notification_service.settings
        python manage.py test notification_service.tests -v 2 --settings=notification_service.settings
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Run frontend build test
      run: |
        cd frontend
        npm run build
        echo "✅ Frontend build successful"

  # 部署阶段 - 推送到main分支时运行
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
      - name: Deploy to Production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.aliCloud }}
          script: |
          echo "🚀 开始部署 Volunteer Platform..."
          
          # 进入项目目录
          cd /home/project/Volunteer-platform
          
          # 更新代码
          echo "📥 更新代码..."
          git pull
          
          # 构建镜像
          echo "🔨 构建镜像..."
          docker compose build
          
          # 检查现有镜像
          echo "1. 检查现有镜像..."
          docker images | grep jsrgzyc
          
          # 导入镜像到containerd
          echo "2. 导入镜像到containerd..."
          
          echo "导入user-service..."
          if docker images | grep -q "jsrgzyc/user-service"; then
              docker save jsrgzyc/user-service:latest | ctr -n k8s.io images import -
              echo "✅ user-service导入成功"
          else
              echo "❌ user-service镜像不存在"
          fi
          
          echo "导入activity-service..."
          if docker images | grep -q "jsrgzyc/activity-service"; then
              docker save jsrgzyc/activity-service:latest | ctr -n k8s.io images import -
              echo "✅ activity-service导入成功"
          else
              echo "❌ activity-service镜像不存在"
          fi
          
          echo "导入notification-service..."
          if docker images | grep -q "jsrgzyc/notification-service"; then
              docker save jsrgzyc/notification-service:latest | ctr -n k8s.io images import -
              echo "✅ notification-service导入成功"
          else
              echo "❌ notification-service镜像不存在"
          fi
          
          echo "导入frontend..."
          if docker images | grep -q "jsrgzyc/frontend"; then
              docker save jsrgzyc/frontend:latest | ctr -n k8s.io images import -
              echo "✅ frontend导入成功"
          else
              echo "❌ frontend镜像不存在"
          fi
          
          # 检查导入结果
          echo "3. 检查导入结果..."
          ctr -n k8s.io images list | grep jsrgzyc
          
          # 验证所有镜像都已导入
          echo "🔍 验证镜像导入状态..."
          required_images=(
              "jsrgzyc/user-service:latest"
              "jsrgzyc/activity-service:latest"
              "jsrgzyc/notification-service:latest"
              "jsrgzyc/frontend:latest"
          )
          
          # 等待并验证镜像导入完成
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
              echo "检查镜像导入状态 (尝试 $attempt/$max_attempts)..."
              all_imported=true
              
              for image in "${required_images[@]}"; do
                  if ctr -n k8s.io images list | grep -q "$image"; then
                      echo "✅ $image 已导入"
                  else
                      echo "⏳ $image 尚未导入，等待中..."
                      all_imported=false
                  fi
              done
              
              if [ "$all_imported" = true ]; then
                  echo "✅ 所有镜像导入完成！"
                  break
              fi
              
              if [ $attempt -eq $max_attempts ]; then
                  echo "❌ 镜像导入超时，以下镜像未能成功导入："
                  for image in "${required_images[@]}"; do
                      if ! ctr -n k8s.io images list | grep -q "$image"; then
                          echo "  - $image"
                      fi
                  done
                  exit 1
              fi
              
              echo "等待2秒后重试..."
              sleep 2
              attempt=$((attempt + 1))
          done
          
          echo "✅ 所有镜像导入完成，开始Kubernetes部署..."
          
          # 检查 kubectl 是否可用
          echo "🔍 检查 kubectl 是否可用..."
          if ! command -v kubectl &> /dev/null; then
              echo "❌ kubectl 未安装或不在 PATH 中"
              exit 1
          else
              echo "✅ kubectl 可用"
          fi
          
          # 检查集群连接
          echo "🔗 检查 Kubernetes 集群连接..."
          if kubectl cluster-info >/dev/null 2>&1; then
              echo "✅ Kubernetes 集群连接正常"
          else
              echo "❌ 无法连接到 Kubernetes 集群，请检查 kubeconfig、网络与集群状态"
              exit 1
          fi
          
          # 创建命名空间
          echo "📦 创建命名空间..."
          kubectl apply -f k8s/namespace.yaml
          
          # 创建配置
          echo "⚙️ 创建配置..."
          kubectl apply -f k8s/configmap.yaml
          
          # 部署数据库服务
          echo "🗄️ 部署数据库服务..."
          kubectl apply -f k8s/postgres-deployment.yaml
          
          # 部署微服务
          echo "🔧 部署微服务..."
          kubectl apply -f k8s/microservices-deployments.yaml
          kubectl apply -f k8s/microservices-services.yaml
          
          # 部署前端
          echo "🔧 部署前端..."
          kubectl apply -f k8s/frontend-deployment.yaml
          
          # 等待基础服务部署完成
          echo "⏳ 等待基础服务部署完成..."
          base_deployments=(
              "postgres"
              "user-service"
              "activity-service"
              "notification-service"
              "frontend-service"
          )
          
          for deployment in "${base_deployments[@]}"; do
              echo "等待 $deployment 就绪..."
              kubectl wait --for=condition=available --timeout=300s deployment/$deployment -n mywork
          done
          
          # 部署 nginx 网关
          echo "🌐 部署 nginx 网关..."
          kubectl apply -f k8s/nginx-deployment.yaml
          
          # 等待nginx网关部署完成
          echo "⏳ 等待 nginx 网关部署完成..."
          kubectl wait --for=condition=available --timeout=300s deployment/nginx-gateway -n mywork
          
          # 部署 Ingress
          echo "🚪 部署 Ingress..."
          kubectl apply -f k8s/ingress-nginx-controller.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # 检查服务状态
          echo "📊 检查服务状态..."
          
          echo "=== Pods ==="
          kubectl get pods -n mywork
          
          echo "=== Services ==="
          kubectl get services -n mywork
          
          echo "=== Ingress ==="
          kubectl get ingress -n mywork
          
          echo "=== ConfigMaps ==="
          kubectl get configmaps -n mywork
          
          echo "=== Deployments ==="
          kubectl get deployments -n mywork
          
          # 获取访问信息
          echo "🔗 获取访问信息..."
          
          # 获取 Ingress 信息
          echo "=== Ingress 访问地址 ==="
          kubectl get ingress -n mywork -o wide
          
          # 获取 NodePort 信息
          echo "=== NodePort 访问地址 ==="
          kubectl get service nginx-gateway-nodeport -n mywork -o wide
          
          # 获取集群 IP
          CLUSTER_IP=$(kubectl get service nginx-gateway-service -n mywork -o jsonpath='{.spec.clusterIP}')
          echo "=== 集群内访问地址 ==="
          echo "http://$CLUSTER_IP"
          
          echo "✅ 部署完成！"
          
    - name: Deployment Summary
      run: |
        echo "## 🎉 部署完成！" >> $GITHUB_STEP_SUMMARY
        echo "| 服务 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 用户服务 | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY
        echo "| 活动服务 | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY
        echo "| 通知服务 | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY
        echo "| 前端服务 | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY
        echo "| Nginx网关 | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY
        echo "| Ingress | ✅ 已部署 |" >> $GITHUB_STEP_SUMMARY